#!/bin/bash

# KYCtrust Deployment Preparation Script
echo "🚀 Preparing KYCtrust for deployment..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

# Check if required files exist
echo "📋 Checking required files..."

if [ ! -f ".env.local" ]; then
    print_warning ".env.local not found. Create it from .env.example"
fi

if [ ! -f "package.json" ]; then
    print_error "package.json not found!"
    exit 1
fi

print_status "Required files check completed"

# Clean previous builds
echo "🧹 Cleaning previous builds..."
npm run clean
print_status "Clean completed"

# Install dependencies
echo "📦 Installing dependencies..."
npm install --legacy-peer-deps
if [ $? -ne 0 ]; then
    print_error "Dependencies installation failed!"
    exit 1
fi
print_status "Dependencies installed"

# Run linting with fixes
echo "🔍 Running linting..."
npm run lint:fix
print_status "Linting completed"

# Type checking
echo "🔧 Type checking..."
npm run type-check
if [ $? -ne 0 ]; then
    print_warning "TypeScript warnings found (non-blocking)"
fi
print_status "Type checking completed"

# Build the project
echo "🏗️  Building project..."
npm run build
if [ $? -ne 0 ]; then
    print_error "Build failed!"
    exit 1
fi
print_status "Build completed successfully"

# Check build size
echo "📊 Checking build size..."
du -sh .next/ 2>/dev/null || echo "Build size check skipped"

# Final checks
echo "🔍 Final checks..."

# Check if essential routes exist
if [ -d ".next/server/app" ]; then
    print_status "App routes built successfully"
else
    print_error "App routes not found in build!"
    exit 1
fi

if [ -d ".next/static" ]; then
    print_status "Static assets built successfully"
else
    print_error "Static assets not found in build!"
    exit 1
fi

echo ""
echo "�� Deployment preparation completed successfully!"
echo ""
echo "📋 Pre-deployment checklist:"
echo "   ✅ Dependencies installed"
echo "   ✅ Code linted and formatted"
echo "   ✅ TypeScript checked"
echo "   ✅ Build completed"
echo "   ✅ Static assets generated"
echo ""
echo "🚀 Ready to deploy!"
echo ""
echo "📝 Next steps:"
echo "   1. Set up production environment variables"
echo "   2. Configure database connection"
echo "   3. Deploy to your hosting provider"
echo "   4. Run post-deployment tests"
echo ""

# Create deployment summary
echo "📄 Creating deployment summary..."
cat > deployment-summary.md << EOF
# Deployment Summary

## Build Information
- **Build Date**: $(date)
- **Node Version**: $(node --version)
- **NPM Version**: $(npm --version)
- **Project Version**: $(node -p "require('./package.json').version")

## Build Status
- ✅ Dependencies installed
- ✅ Linting passed
- ✅ TypeScript checked
- ✅ Build completed
- ✅ Static assets generated

## Production Checklist
- [ ] Environment variables configured
- [ ] Database connection tested
- [ ] SSL certificate configured
- [ ] Domain configured
- [ ] Monitoring setup
- [ ] Backup strategy implemented

## Important Notes
- Ensure POSTGRES_URL is set in production
- Configure proper security headers
- Set up error monitoring
- Enable analytics if needed

---
Generated by prepare-deploy.sh on $(date)
EOF

print_status "Deployment summary created: deployment-summary.md"
